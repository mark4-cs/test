#include<stdio.h>
#include<string.h>	// strlen
#include<sys/socket.h>
#include<arpa/inet.h>	// inet_addr
#include<unistd.h>	// write
#include<stdlib.h>
#define MB 1048576


int main(int argc , char *argv[])
{
    long int read_size;
    struct sockaddr_in server , client;
    char* client_message = (char*)malloc(MB);
    int socket_desc , client_sock , socket_size;

    // Creating the socket
    socket_desc = socket(AF_INET , SOCK_STREAM , 0);
    if (socket_desc == -1)
    {
        //printf("Socket could not be created");
        return 1;
    }
    //puts("Socket was created successfully");

    server.sin_addr.s_addr = INADDR_ANY;
    server.sin_port = htons(8001);
    server.sin_family = AF_INET;


    // Calling bind
    if(bind(socket_desc,(struct sockaddr *)&server , sizeof(server)) < 0)
    {
        //print the error message
        //perror("bind failed due to an error");
        return 1;
    }
    //puts("bind completed successfully");

    // listen for clients to connect
    listen(socket_desc , 3);

    //puts("Waiting for client to connect to the server");
    socket_size = sizeof(struct sockaddr_in);

    //accept connection from an incoming client
    client_sock = accept(socket_desc, (struct sockaddr *)&client, (socklen_t*)&socket_size);
    if (client_sock < 0)
    {
        //perror("accept failed");
        return 1;
    }
    //puts("Connection was accepted successfully");
    // while receive a message from client, return the message to the client
    while((read_size = recv(client_sock , client_message , MB, 0)) > 0)
    {
        //Send the message back to client
        write(client_sock , client_message , read_size);
    }
    // Check if the client disconnected from the server
    if(read_size == 0)
    {
        //puts("Client was disconnected from the server");
        fflush(stdout);
    }
    else if(read_size == -1)
    {
        //perror("recv failed due to unexpected error");
        return 1;
    }
    return 0;
}